package Datastructure.Tree.BinarySearchTree;

import java.util.PriorityQueue;
import java.util.TreeMap;

public class BalancedBst {

    Node root;
    int value;


public BalancedBst(){
    this.root=null;
    value=0;
}
    

//insert into Binary search tree
public void insert(int value){
    Node newNode = new Node(value);
    if(root==null) root=newNode;
    else{
        Node currentNode=root;
        while(true){
        //left
        if(value<currentNode.value){
            if(currentNode.left!=null){
                currentNode=currentNode.left;
                
            }else{
            currentNode.left=newNode;
            break;
        }        

        }
        //right
        else{
            if(currentNode.right!=null){
               currentNode=currentNode.right;               
            }
            currentNode.right=newNode;
            break;
           
        }
    }
    }

}

    //find search ,node/value in BST
 public boolean lookup(int value){
    Node currentNode = root;
    while(currentNode!=null){
if(value<currentNode.value){
    currentNode=currentNode.left;
    }   else if(value>currentNode.value){
    currentNode=currentNode.right;        
    }
     else if(value==currentNode.value){
    return true;
    }

    }
    return false;
}

//remove from bst
public boolean remove(int value){
    if(root==null)  return false;
    else{
        Node currentNode=root;
        Node parentNode=null;  //to keep reference of previous of current node ,so that at time of delete it will be used 
        
        while(currentNode!=null){
            if(value<currentNode.value){
                parentNode=currentNode;
                currentNode=currentNode.left;
            }else if(value>currentNode.value){
                parentNode=currentNode;
                currentNode=currentNode.right;
            }else if(value==currentNode.value) {

            //Option 1 : No right Child present 
                if(currentNode.right==null){
                    if(parentNode==null) {root=currentNode.left;}
                //logic is simple whatever node we have to remove  make left child of current as adjustment of parent.
                    else{
                         //if parent < current value, make left child of current a right child of parent   
                        if(currentNode.value>parentNode.value){
                            parentNode.right=currentNode.left;
                        }
                        //if parent > current value, make current left child a left child of parent
                        else if(currentNode.value<parentNode.value){
                            parentNode.left=currentNode.left;
                        }                       
                    }                    
                }

            //Option 2: Right child which doesnt have a left child
                else if(currentNode.right.left==null){
                    currentNode.right.left=currentNode.left;
                    if(parentNode==null) {root=currentNode.right;}
                //logic is simple whatever node we have to remove  make right child of current as adjustment of parent.
                    else{

                        //if parent > current, make right child of the left the parent
                        if(parentNode.value>currentNode.value){
                            parentNode.left=currentNode.right;
                        }
                        //if parent < current, make right child a right child of the parent
                        else if(parentNode.value<currentNode.value){
                            parentNode.right=currentNode.right;
                        }
                    }
                }

            //Option 3: Right child that has a left child
                else {
                     //find the Right child's left most child
                     Node leftMost=currentNode.right.left;
                     Node leftMostparent=currentNode.right;
                }


            }
        }
        return true;
    }
}

    public static void main(String[] args) {  
        BalancedBst bst=new BalancedBst();
        bst.insert(9);
        bst.insert(4);
        bst.insert(1);
        //TreeMap red = new  TreeMap<>();
        PriorityQueue queue = new PriorityQueue<>();
        queue.add(23);
        queue.add(34);
        queue.add(2);
        queue.add(99);
        

       

        System.out.println( bst.lookup(4));

    }

    //      9
//      4        20
//    1  6     15  170
    
}
